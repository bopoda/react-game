{"version":3,"sources":["component/nav/NavNewGame.tsx","component/api/levelApi.ts","component/game/GameCell.tsx","component/nav/NavHotkeys.tsx","component/game/Timer.tsx","component/nav/NavRecords.tsx","component/game/index.tsx","component/header/index.tsx","images/rs_school_js.svg","component/footer/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavNewGame","useState","showNewGameMenu","setShowNewGameMenu","onDocumentClick","e","target","classList","contains","useEffect","document","addEventListener","removeEventListener","className","onClick","href","preventDefault","localStorage","removeItem","window","location","reload","getRandomLevel","levels","Math","floor","random","length","GameCell","props","cellConfig","selected","push","value","solution","join","getCellClassName","console","log","setSelectedCell","prefilled","NavHotkeys","getHumanReadableTimerTime","secondsSpent","minutes","toString","slice","getMinutes","getSeconds","Timer","finished","timer","setTimeout","setSecondsSpent","clearTimeout","NavRecords","records","map","seconds","i","Game","setRecords","setFinished","cells","setCells","selectedCell","showMistakes","setShowMistakes","range","start","end","result","isSelectedCell","undefined","row","col","onKeydown","key","changeCurrentCellValue","parseInt","newValue","newCells","JSON","parse","stringify","cell","isAllCellsDone","onGameFinished","alert","unshift","savedRecords","getItem","savedSecondsSpent","savedCells","savedShowMistakes","levelApiResponse","cellsTemp","Array","index","FIELD_SIZE","column","mission","startNewGame","setItem","type","checked","onChange","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","rowNumber","columnNumber","Header","Footer","src","rsSchoolLogo","alt","App","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4e708cd7.chunk.js","sourcesContent":["import React, {SyntheticEvent, useEffect, useState} from \"react\";\n\nfunction NavNewGame() {\n    const [showNewGameMenu, setShowNewGameMenu] = useState<boolean>(false);\n\n    useEffect(() => {\n        document.addEventListener('click', onDocumentClick);\n        return () => {\n            document.removeEventListener('click', onDocumentClick);\n        }\n    }, []);\n\n    function newGameClick(): void {\n        setShowNewGameMenu(!showNewGameMenu);\n    }\n\n    function onCancel(e: SyntheticEvent): void {\n        e.preventDefault();\n    }\n\n    function onRestart(e: SyntheticEvent): void {\n        e.preventDefault();\n\n        localStorage.removeItem('CELLS');\n        localStorage.removeItem('SECONDS_SPENT');\n\n        window.document.location.reload();\n    }\n\n    function onDocumentClick(e: MouseEvent): void {\n        if (!e.target) {\n            return;\n        }\n\n        const el = e.target as Element;\n        if (!el.classList.contains('new-game-button')) {\n            setShowNewGameMenu(false);\n        }\n    }\n\n    return (\n        <div className=\"new-game-button-wrapper\">\n            <div className=\"button new-game-button\" onClick={newGameClick}>New Game</div>\n            {showNewGameMenu &&\n            <div className=\"new-game-menu\">\n                <div className=\"tooltip-arrow\">{' '}</div>\n                <ul>\n                    <li className=\"lost-progress-label\">\n                        Current game progress will be lost\n                    </li>\n                    <li><a href=\"/#\"\n                           className=\"new-game-menu-new\"\n                           onClick={onRestart}\n                    >New Game</a></li>\n                    <li><a href=\"/#\"\n                           className=\"new-game-menu-cancel\"\n                           onClick={onCancel}\n                    >Cancel</a></li>\n                </ul>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default NavNewGame;","import {LevelApiResponse} from \"../game/types\";\n\nfunction getRandomLevel(): LevelApiResponse {\n    const levels = [\n        {\n            \"mission\": \"970000600201509034830040010000402000706050002052038000500817006620394051000060403\",\n            \"solution\": \"974123685261589734835746219319472568786951342452638197543817926627394851198265473\",\n        },\n        {\n            \"mission\": \"020000000158000030340160902009208175000040000035601000000300594513480007690752003\",\n            \"solution\": \"926873451158924736347165982469238175281547369735691248872316594513489627694752813\",\n        },\n        {\n            \"mission\": \"060003000000004703074100020490038057208040096700600204501489600009000031000316509\",\n            \"solution\": \"962873415185924763374165928496238157218547396753691284531489672649752831827316549\",\n        },\n        {\n            \"mission\": \"209060038004508100605000409050340020000001000470006891000420913042910600097000204\",\n            \"solution\": \"219764538734598162685132479851349726926871345473256891568427913342915687197683254\",\n        },\n        {\n            \"mission\": \"038764200160008030479102600300000020020340051000250400013027500607010000250600007\",\n            \"solution\": \"538764219162598734479132685345871926726349851891256473913427568687915342254683197\",\n        },\n        {\n            \"mission\": \"068027901000910008107003040470206000051349700020870350019060000030500006605000407\",\n            \"solution\": \"568427931342915678197683245473256819851349762926871354219764583734598126685132497\",\n        },\n        {\n            \"mission\": \"004300001007091240190040800709200506002050030000076912405080000270000158000625370\",\n            \"solution\": \"524368791867591243193742865749213586612859437358476912435187629276934158981625374\",\n        },\n        {\n            \"mission\": \"503200100006007802100300705351002084007040610460801000000008561002415070805060000\",\n            \"solution\": \"573284196946157832128396745351672984287549613469831257734928561692415378815763429\",\n        },\n    ];\n\n    return levels[Math.floor(Math.random() * levels.length)];\n}\n\nexport default getRandomLevel;","import React from \"react\";\nimport {CellConfigInterface} from \"./types\";\n\ninterface Props {\n    cellConfig: CellConfigInterface|null\n    selected: boolean\n    setSelectedCell: (cellConfig: CellConfigInterface) => void\n}\n\nfunction GameCell(props: Props) {\n    const {cellConfig} = props;\n\n    function onClick(): void {\n        console.log('clicked cell:', cellConfig);\n        if (null === cellConfig) {\n            return;\n        }\n\n        props.setSelectedCell(cellConfig);\n    }\n\n    function getCellClassName(): string {\n        const className = ['game-cell'];\n\n        if (props.selected) {\n            className.push(\"cell-selected\");\n        }\n\n\n        if (cellConfig && cellConfig.value > 0\n            && cellConfig.value !== cellConfig.solution) {\n            className.push(\"cell-mistake\");\n        }\n\n        return className.join(' ');\n    }\n\n    return (\n        <td className={getCellClassName()}\n            onClick={onClick}\n        >\n            <div className={\"cell-value\" + (cellConfig?.prefilled ? \" cell-prefilled\" : \"\")}>\n                {cellConfig?.value ? cellConfig.value : ''}\n            </div>\n        </td>\n    )\n}\n\nexport default GameCell;","import React from \"react\";\n\nfunction NavHotkeys() {\n    return (\n        <div className=\"hotkeys-wrapper\">\n            <p>Hotkeys:</p>\n            <ul>\n                <li><code>1-9</code> — fill selected cell</li>\n                <li><code>0</code>, <code>Backspace</code> — erase selected cell</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default NavHotkeys;","import React, {useEffect} from \"react\";\n\ninterface Props {\n    secondsSpent: number\n    setSecondsSpent: (seconds: number) => void\n    finished: boolean\n}\n\nfunction getMinutes(secondsSpent: number): string {\n    if (secondsSpent < 60) {\n        return \"00\";\n    }\n\n    const minutes = Math.floor(secondsSpent / 60);\n    if (minutes >= 100) {\n        return minutes.toString();\n    }\n\n    return (\"0\" + minutes).slice(-2);\n}\n\nfunction getSeconds(secondsSpent: number): string {\n    return (\"0\" + secondsSpent % 60).slice(-2);\n}\n\nexport function getHumanReadableTimerTime(secondsSpent: number) {\n    return getMinutes(secondsSpent) + \":\" + getSeconds(secondsSpent);\n}\n\nfunction Timer(props: Props) {\n    const {secondsSpent} = props;\n\n    useEffect(() => {\n        if (!props.finished) {\n            const timer = setTimeout(() => {\n                console.log('timer +1');\n                props.setSecondsSpent(secondsSpent + 1);\n            }, 1000);\n            return () => clearTimeout(timer);\n        }\n    });\n\n    return (\n        <span className=\"timer\">\n            {getHumanReadableTimerTime(props.secondsSpent)}\n        </span>\n    )\n}\n\nexport default Timer;","import React from \"react\";\nimport {getHumanReadableTimerTime} from \"../game/Timer\";\n\ninterface Props {\n    records: number[]\n}\n\nfunction NavRecords(props: Props) {\n    return (\n        <div className=\"records-wrapper\">\n            <p>Last 10 Records:</p>\n            {props.records.length ?\n            <ul>\n                {props.records.map(function (seconds: number, i: number) {\n                    return (\n                        <li key={i}>\n                            {getHumanReadableTimerTime(seconds)}\n                        </li>\n                    );\n                })}\n            </ul>\n                : null\n            }\n        </div>\n    )\n}\n\nexport default NavRecords;","import React, {useEffect, useState} from \"react\";\nimport NavNewGame from \"../nav/NavNewGame\";\nimport {CellConfigInterface, CellSolutionType, CellValueType} from \"./types\";\nimport getRandomLevel from \"../api/levelApi\";\nimport GameCell from \"./GameCell\";\nimport \"./gamestyle.scss\";\nimport NavHotkeys from \"../nav/NavHotkeys\";\nimport Timer, {getHumanReadableTimerTime} from \"./Timer\";\nimport NavRecords from \"../nav/NavRecords\";\n\nconst FIELD_SIZE = 9;\nconst MAX_COUNT_RECORDS = 10;\n\nfunction Game() {\n    const [records, setRecords] = useState<number[]>([]);\n    const [finished, setFinished] = useState<boolean>(false);\n    const [cells, setCells] = useState<Array<Array<CellConfigInterface>>>([]);\n    const [selectedCell, setSelectedCell] = useState<CellConfigInterface>();\n    const [showMistakes, setShowMistakes] = useState<boolean>(false);\n    const [secondsSpent, setSecondsSpent] = useState<number>(0);\n\n    useEffect(() => {\n        document.addEventListener('keydown', onKeydown);\n        return () => {\n            document.removeEventListener('keydown', onKeydown);\n        }\n        // eslint-disable-next-line\n    }, [selectedCell]);\n\n    useEffect(() => {\n        const savedRecords = localStorage.getItem('RECORDS') as string;\n        if (savedRecords) {\n            setRecords(JSON.parse(savedRecords));\n        }\n\n        const savedSecondsSpent = localStorage.getItem('SECONDS_SPENT') as string;\n        if (savedSecondsSpent) {\n            setSecondsSpent(parseInt(savedSecondsSpent));\n        }\n\n        const savedCells = JSON.parse(localStorage.getItem('CELLS') as string);\n        if (savedCells) {\n            setCells(savedCells);\n        }\n        const savedShowMistakes = localStorage.getItem('SHOW_MISTAKES') === \"1\";\n        setShowMistakes(savedShowMistakes);\n\n        if (savedCells) {\n            return;\n        }\n\n        const timer = setTimeout(() => {\n            startNewGame();\n        }, 500);\n\n        return () => {\n            clearTimeout(timer);\n        }\n        // eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem('RECORDS', JSON.stringify(records));\n        localStorage.setItem('SHOW_MISTAKES', showMistakes ? \"1\" : \"0\");\n        localStorage.setItem('SECONDS_SPENT', secondsSpent.toString());\n        localStorage.setItem(\"CELLS\", JSON.stringify(cells));\n    });\n\n    function range(start: number, end: number): number[] {\n        const result = [];\n        for (let i = start; i <= end; i++) {\n            result.push(i);\n        }\n\n        return result;\n    }\n\n    function isSelectedCell(cellConfig: CellConfigInterface): boolean {\n        return selectedCell !== undefined\n            && selectedCell.row === cellConfig.row\n            && selectedCell.col === cellConfig.col;\n    }\n\n    function startNewGame(): void {\n        const levelApiResponse = getRandomLevel();\n        console.log('Start new game...', levelApiResponse);\n\n        const cellsTemp = new Array<Array<CellConfigInterface>>();\n        let index = 0;\n        for (let row = 0; row <= FIELD_SIZE - 1; row++) {\n            cellsTemp[row] = new Array<CellConfigInterface>();\n            for (let column = 0; column <= FIELD_SIZE - 1; column++) {\n                cellsTemp[row][column] = {\n                    value: parseInt(levelApiResponse.mission[index]) as CellValueType,\n                    solution: parseInt(levelApiResponse.solution[index]) as CellSolutionType,\n                    prefilled: levelApiResponse.mission[index] === levelApiResponse.solution[index],\n                    row: row,\n                    col: column\n                }\n\n                index++;\n            }\n        }\n\n        setCells(cellsTemp);\n    }\n\n    function onKeydown(e: KeyboardEvent): void {\n        console.log('key pressed:', e.key);\n\n        if (!selectedCell) {\n            console.log('No cell selected when key pressed:', e.key);\n            return;\n        }\n\n        switch (e.key) {\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n                changeCurrentCellValue(parseInt(e.key) as CellValueType);\n                break;\n\n            case '0':\n            case 'Backspace':\n                changeCurrentCellValue(0 as CellValueType);\n                break;\n\n            default:\n                //do nothing\n                break;\n        }\n    }\n\n    function changeCurrentCellValue(newValue: CellValueType): void {\n        if (!selectedCell || selectedCell.prefilled) {\n            return;\n        }\n\n        if (finished) {\n            return;\n        }\n\n        const newCells = JSON.parse(JSON.stringify(cells));\n        newCells[selectedCell.row][selectedCell.col].value = newValue;\n        setCells(newCells);\n\n        if (isAllCellsDone(newCells)) {\n            onGameFinished();\n        }\n    }\n\n    function saveRecord(): void {\n        records.unshift(secondsSpent);\n\n        setRecords(records.slice(0, MAX_COUNT_RECORDS));\n    }\n\n    function isAllCellsDone(cells: Array<Array<CellConfigInterface>>): boolean {\n        for (const row of cells) {\n            for (const cell of row) {\n                if (cell.value !== cell.solution) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function solveAllCells(): void {\n        if (finished) {\n            alert('The game is already solved');\n            return;\n        }\n\n        const newCells = JSON.parse(JSON.stringify(cells));\n\n        for (const row of newCells) {\n            for (const cell of row) {\n                cell.value = cell.solution;\n            }\n        }\n\n        setCells(newCells);\n        onGameFinished();\n    }\n\n    function onGameFinished(): void {\n        localStorage.removeItem('CELLS');\n        localStorage.removeItem('SECONDS_SPENT');\n        setFinished(true);\n        alert(\"Congrats! Your score is \" + getHumanReadableTimerTime(secondsSpent) + \". You can start new game.\");\n        saveRecord();\n    }\n\n    function handleShowMistakesClick() {\n        setShowMistakes(!showMistakes);\n    }\n\n    function setTimerSecondsSpent(secondsSpent: number) {\n        setSecondsSpent(secondsSpent);\n    }\n\n    function fullScreen(): void {\n        if (!document.fullscreenElement) {\n            document.documentElement.requestFullscreen();\n        } else {\n            document.exitFullscreen();\n        }\n    }\n\n    return (\n        <div className=\"sudoku-wrapper\">\n            <div className=\"game-info-wrapper flex-wrapper\">\n                <div className=\"check-mistakes-wrapper\">\n                    <label className=\"check-mistakes\">\n                        <span className=\"label-text\">Show Mistakes</span>\n                        <span className=\"switch\">\n                                    <input type=\"checkbox\"\n                                           checked={showMistakes}\n                                           onChange={handleShowMistakesClick}\n                                    />\n                                </span>\n                    </label>\n                </div>\n                <div className=\"timer-wrapper\">\n                    <Timer secondsSpent={secondsSpent}\n                           setSecondsSpent={setTimerSecondsSpent}\n                           finished={finished}\n                    />\n                </div>\n                <div className=\"full-screen-wrapper\">\n                    <input type=\"button\"\n                           value={document.fullscreenElement ? \"Minimize\" : \"Full Screen\"}\n                           onClick={fullScreen}\n                    />\n                </div>\n            </div>\n            <div className=\"game-flex-wrapper\">\n                <div className=\"game-wrapper\">\n                    <div className=\"game\">\n                        <table className={\"game-table\" + (showMistakes ? \" show-mistakes\" : \"\")}>\n                            <tbody>\n                            {range(0, FIELD_SIZE - 1).map(rowNumber => {\n                                return (\n                                    <tr className=\"game-row\" key={rowNumber}>\n                                        {range(0, FIELD_SIZE - 1).map(columnNumber => {\n                                            const cellConfig = cells.length ? cells[rowNumber][columnNumber] : null;\n                                            return <GameCell cellConfig={cellConfig}\n                                                             key={rowNumber.toString() + columnNumber.toString()}\n                                                             selected={cellConfig ? isSelectedCell(cellConfig) : false}\n                                                             setSelectedCell={setSelectedCell}\n                                            />\n                                        })}\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <div className=\"game-controls-wrapper\">\n                    <nav>\n                        <NavNewGame/>\n                        <input type=\"button\" value=\"Solve all automatically\" onClick={solveAllCells} />\n                        <NavHotkeys/>\n                        <NavRecords records={records}/>\n                    </nav>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Game;","import React from \"react\";\nimport \"./Header.scss\";\n\nfunction Header() {\n   return (\n       <header className=\"site-header\">\n           <div className=\"content-wrapper\">\n               <a href=\"/\" className=\"logo-sudoku\">{' '}</a>\n           </div>\n       </header>\n   )\n}\n\nexport default Header;","export default __webpack_public_path__ + \"static/media/rs_school_js.ad178c0d.svg\";","import React from \"react\";\nimport rsSchoolLogo from \"../../images/rs_school_js.svg\";\nimport \"./Footer.scss\";\n\nfunction Footer() {\n    return (\n        <footer className=\"site-footer\">\n            <div className=\"content-wrapper flex-wrapper\">\n                <div className=\"footer-item\">\n                    <a className=\"rs-logo\" href=\"https://rs.school/js/\">\n                        <img src={rsSchoolLogo} alt=\"RS School\"/>\n                    </a>\n                </div>\n                <div className=\"footer-item\">\n                    <a href=\"https://github.com/bopoda\">Eugene Yurkevich</a>, 2021\n                </div>\n                <div className=\"footer-item\">\n                    {' '}\n                </div>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Game from \"./component/game\";\nimport Header from \"./component/header\";\nimport Footer from \"./component/footer\";\n\nfunction App() {\n    return (\n        <>\n            <Header/>\n            <div className=\"content-wrapper site-content-wrapper\" id=\"site-content-wrapper\">\n                <div className=\"site-content\">\n                    <Game/>\n                </div>\n            </div>\n            <Footer/>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
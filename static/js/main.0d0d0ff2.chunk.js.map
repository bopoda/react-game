{"version":3,"sources":["component/nav/NavNewGame.tsx","component/api/levelApi.ts","component/game/GameCell.tsx","component/nav/NavHotkeys.tsx","component/game/Timer.tsx","component/nav/NavRecords.tsx","sounds/click.mp3","sounds/correct.mp3","sounds/wrong.mp3","component/game/index.tsx","component/header/index.tsx","images/rs_school_js.svg","component/footer/index.tsx","sounds/birds.mp3","component/sound/SoundsMusic.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavNewGame","props","useState","showNewGameMenu","setShowNewGameMenu","onDocumentClick","e","target","classList","contains","useEffect","document","addEventListener","removeEventListener","className","onClick","href","preventDefault","localStorage","removeItem","window","location","reload","restartCells","getRandomLevel","levels","Math","floor","random","length","GameCell","cellConfig","selected","push","value","solution","join","getCellClassName","console","log","setSelectedCell","prefilled","NavHotkeys","getHumanReadableTimerTime","secondsSpent","minutes","toString","slice","getMinutes","getSeconds","Timer","finished","timer","setTimeout","setSecondsSpent","clearTimeout","NavRecords","records","map","seconds","i","Game","setRecords","setFinished","cells","setCells","selectedCell","showMistakes","setShowMistakes","volume","setVolume","cellsRef","useRef","current","useSound","soundClick","playCellSelectedSound","soundCorrect","playCorrectSound","soundWrong","playWrongSound","range","start","end","result","isSelectedCell","undefined","row","col","onKeydown","key","changeCurrentCellValue","parseInt","newValue","newCells","JSON","parse","stringify","isAllCellsDone","cell","selectCell","solveExactlyOneCell","notSolvedCells","getAndSelectRandomNotSolvedCell","randomIntFromInterval","min","max","setTimerSecondsSpent","savedRecords","getItem","savedSecondsSpent","savedCells","savedShowMistakes","levelApiResponse","cellsTemp","Array","index","FIELD_SIZE","column","mission","startNewGame","setItem","dataMusicSoundSaved","valueSound","alert","unshift","type","checked","onChange","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","rowNumber","columnNumber","solveAutomaticallyStepByStep","Header","Footer","src","rsSchoolLogo","alt","SoundsMusic","audioMusic","getElementById","audioSound","valueMusic","setValueMusic","setValueSound","valuesToSave","loop","id","musicBirds","name","step","pause","play","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0d0d0ff2.chunk.js","sourcesContent":["import React, {SyntheticEvent, useEffect, useState} from \"react\";\n\ninterface Props {\n    restartCells: () => void\n}\n\nfunction NavNewGame(props: Props) {\n    const [showNewGameMenu, setShowNewGameMenu] = useState<boolean>(false);\n\n    useEffect(() => {\n        document.addEventListener('click', onDocumentClick);\n        return () => {\n            document.removeEventListener('click', onDocumentClick);\n        }\n    }, []);\n\n    function newGameClick(): void {\n        setShowNewGameMenu(!showNewGameMenu);\n    }\n\n    function onCancel(e: SyntheticEvent): void {\n        e.preventDefault();\n    }\n\n    function onNewGameClick(e: SyntheticEvent): void {\n        e.preventDefault();\n\n        localStorage.removeItem('CELLS');\n        localStorage.removeItem('SECONDS_SPENT');\n\n        window.document.location.reload();\n    }\n\n    function onRestart(e: SyntheticEvent): void {\n        e.preventDefault();\n\n        localStorage.removeItem('CELLS');\n        localStorage.removeItem('SECONDS_SPENT');\n\n        props.restartCells();\n\n        window.document.location.reload();\n    }\n\n    function onDocumentClick(e: MouseEvent): void {\n        if (!e.target) {\n            return;\n        }\n\n        const el = e.target as Element;\n        if (!el.classList.contains('new-game-button')) {\n            setShowNewGameMenu(false);\n        }\n    }\n\n    return (\n        <div className=\"new-game-button-wrapper\">\n            <div className=\"button new-game-button\" onClick={newGameClick}>New Game</div>\n            {showNewGameMenu &&\n            <div className=\"new-game-menu\">\n                <div className=\"tooltip-arrow\">{' '}</div>\n                <ul>\n                    <li className=\"lost-progress-label\">\n                        Current game progress will be lost\n                    </li>\n                    <li><a href=\"/#\"\n                           className=\"new-game-menu-new\"\n                           onClick={onNewGameClick}\n                    >New Game</a></li>\n                    <li><a href=\"/#\"\n                           className=\"new-game-menu-restart\"\n                           onClick={onRestart}\n                    >Restart</a></li>\n                    <li><a href=\"/#\"\n                           className=\"new-game-menu-cancel\"\n                           onClick={onCancel}\n                    >Cancel</a></li>\n                </ul>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default NavNewGame;","import {LevelApiResponse} from \"../game/types\";\n\nfunction getRandomLevel(): LevelApiResponse {\n    const levels = [\n        {\n            \"mission\": \"970000600201509034830040010000402000706050002052038000500817006620394051000060403\",\n            \"solution\": \"974123685261589734835746219319472568786951342452638197543817926627394851198265473\",\n        },\n        {\n            \"mission\": \"020000000158000030340160902009208175000040000035601000000300594513480007690752003\",\n            \"solution\": \"926873451158924736347165982469238175281547369735691248872316594513489627694752813\",\n        },\n        {\n            \"mission\": \"060003000000004703074100020490038057208040096700600204501489600009000031000316509\",\n            \"solution\": \"962873415185924763374165928496238157218547396753691284531489672649752831827316549\",\n        },\n        {\n            \"mission\": \"209060038004508100605000409050340020000001000470006891000420913042910600097000204\",\n            \"solution\": \"219764538734598162685132479851349726926871345473256891568427913342915687197683254\",\n        },\n        {\n            \"mission\": \"038764200160008030479102600300000020020340051000250400013027500607010000250600007\",\n            \"solution\": \"538764219162598734479132685345871926726349851891256473913427568687915342254683197\",\n        },\n        {\n            \"mission\": \"068027901000910008107003040470206000051349700020870350019060000030500006605000407\",\n            \"solution\": \"568427931342915678197683245473256819851349762926871354219764583734598126685132497\",\n        },\n        {\n            \"mission\": \"004300001007091240190040800709200506002050030000076912405080000270000158000625370\",\n            \"solution\": \"524368791867591243193742865749213586612859437358476912435187629276934158981625374\",\n        },\n        {\n            \"mission\": \"503200100006007802100300705351002084007040610460801000000008561002415070805060000\",\n            \"solution\": \"573284196946157832128396745351672984287549613469831257734928561692415378815763429\",\n        },\n    ];\n\n    return levels[Math.floor(Math.random() * levels.length)];\n}\n\nexport default getRandomLevel;","import React from \"react\";\nimport {CellConfigInterface} from \"./types\";\n\ninterface Props {\n    cellConfig: CellConfigInterface|null\n    selected: boolean\n    setSelectedCell: (cellConfig: CellConfigInterface) => void\n}\n\nfunction GameCell(props: Props) {\n    const {cellConfig} = props;\n\n    function onClick(): void {\n        console.log('clicked cell:', cellConfig);\n        if (null === cellConfig) {\n            return;\n        }\n\n        props.setSelectedCell(cellConfig);\n    }\n\n    function getCellClassName(): string {\n        const className = ['game-cell'];\n\n        if (props.selected) {\n            className.push(\"cell-selected\");\n        }\n\n\n        if (cellConfig && cellConfig.value > 0\n            && cellConfig.value !== cellConfig.solution) {\n            className.push(\"cell-mistake\");\n        }\n\n        return className.join(' ');\n    }\n\n    return (\n        <td className={getCellClassName()}\n            onClick={onClick}\n        >\n            <div className={\"cell-value\" + (cellConfig?.prefilled ? \" cell-prefilled\" : \"\")}>\n                {cellConfig?.value ? cellConfig.value : ''}\n            </div>\n        </td>\n    )\n}\n\nexport default GameCell;","import React from \"react\";\n\nfunction NavHotkeys() {\n    return (\n        <div className=\"hotkeys-wrapper\">\n            <p>Hotkeys:</p>\n            <ul>\n                <li><code>1-9</code> — fill selected cell</li>\n                <li><code>0</code>, <code>Backspace</code> — erase selected cell</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default NavHotkeys;","import React, {useEffect} from \"react\";\n\ninterface Props {\n    secondsSpent: number\n    setSecondsSpent: (seconds: number) => void\n    finished: boolean\n}\n\nfunction getMinutes(secondsSpent: number): string {\n    if (secondsSpent < 60) {\n        return \"00\";\n    }\n\n    const minutes = Math.floor(secondsSpent / 60);\n    if (minutes >= 100) {\n        return minutes.toString();\n    }\n\n    return (\"0\" + minutes).slice(-2);\n}\n\nfunction getSeconds(secondsSpent: number): string {\n    return (\"0\" + secondsSpent % 60).slice(-2);\n}\n\nexport function getHumanReadableTimerTime(secondsSpent: number) {\n    return getMinutes(secondsSpent) + \":\" + getSeconds(secondsSpent);\n}\n\nfunction Timer(props: Props) {\n    const {secondsSpent} = props;\n\n    useEffect(() => {\n        if (!props.finished) {\n            const timer = setTimeout(() => {\n                console.log('timer +1');\n                props.setSecondsSpent(secondsSpent + 1);\n            }, 1000);\n            return () => clearTimeout(timer);\n        }\n    });\n\n    return (\n        <span className=\"timer\">\n            {getHumanReadableTimerTime(props.secondsSpent)}\n        </span>\n    )\n}\n\nexport default Timer;","import React from \"react\";\nimport {getHumanReadableTimerTime} from \"../game/Timer\";\n\ninterface Props {\n    records: number[]\n}\n\nfunction NavRecords(props: Props) {\n    return (\n        <div className=\"records-wrapper\">\n            <p>Last 10 Records:</p>\n            {props.records.length ?\n            <ul>\n                {props.records.map(function (seconds: number, i: number) {\n                    return (\n                        <li key={i}>\n                            {getHumanReadableTimerTime(seconds)}\n                        </li>\n                    );\n                })}\n            </ul>\n                : null\n            }\n        </div>\n    )\n}\n\nexport default NavRecords;","export default __webpack_public_path__ + \"static/media/click.d800ae9a.mp3\";","export default __webpack_public_path__ + \"static/media/correct.23d0e138.mp3\";","export default __webpack_public_path__ + \"static/media/wrong.0afb49d7.mp3\";","import React, {useEffect, useRef, useState} from \"react\";\nimport NavNewGame from \"../nav/NavNewGame\";\nimport {CellConfigInterface, CellSolutionType, CellValueType} from \"./types\";\nimport getRandomLevel from \"../api/levelApi\";\nimport GameCell from \"./GameCell\";\nimport \"./gamestyle.scss\";\nimport NavHotkeys from \"../nav/NavHotkeys\";\nimport Timer, {getHumanReadableTimerTime} from \"./Timer\";\nimport NavRecords from \"../nav/NavRecords\";\nimport useSound from \"use-sound\";\n//@ts-ignore\nimport soundClick from '../../sounds/click.mp3';\n//@ts-ignore\nimport soundCorrect from '../../sounds/correct.mp3';\n//@ts-ignore\nimport soundWrong from '../../sounds/wrong.mp3';\n\nconst FIELD_SIZE = 9;\nconst MAX_COUNT_RECORDS = 10;\nconst SOLVE_AUTOMATICALLY_CELL_MIN_TIMEOUT = 600;\n\nfunction Game() {\n    const [records, setRecords] = useState<number[]>([]);\n    const [finished, setFinished] = useState<boolean>(false);\n    const [cells, setCells] = useState<Array<Array<CellConfigInterface>>>([]);\n    const [selectedCell, setSelectedCell] = useState<CellConfigInterface>();\n    const [showMistakes, setShowMistakes] = useState<boolean>(false);\n    const [secondsSpent, setSecondsSpent] = useState<number>(0);\n    const [volume, setVolume] = useState<number>(0);\n\n    const cellsRef = useRef(cells);\n    cellsRef.current = cells;\n\n    const [playCellSelectedSound] = useSound(\n        soundClick,\n        { volume: volume }\n    );\n    const [playCorrectSound] = useSound(\n        soundCorrect,\n        { volume: volume }\n    );\n    const [playWrongSound] = useSound(\n        soundWrong,\n        { volume: volume }\n    );\n\n    useEffect(() => {\n        document.addEventListener('keydown', onKeydown);\n        return () => {\n            document.removeEventListener('keydown', onKeydown);\n        }\n        // eslint-disable-next-line\n    }, [selectedCell]);\n\n    useEffect(() => {\n        const savedRecords = localStorage.getItem('RECORDS') as string;\n        if (savedRecords) {\n            setRecords(JSON.parse(savedRecords));\n        }\n\n        const savedSecondsSpent = localStorage.getItem('SECONDS_SPENT') as string;\n        if (savedSecondsSpent) {\n            setSecondsSpent(parseInt(savedSecondsSpent));\n        }\n\n        const savedCells = JSON.parse(localStorage.getItem('CELLS') as string);\n        if (savedCells) {\n            setCells(savedCells);\n        }\n        const savedShowMistakes = localStorage.getItem('SHOW_MISTAKES') === \"1\";\n        setShowMistakes(savedShowMistakes);\n\n        if (savedCells) {\n            if (isAllCellsDone(savedCells)) {\n                setFinished(true);\n            }\n\n            return;\n        }\n\n        const timer = setTimeout(() => {\n            startNewGame();\n        }, 700);\n\n        return () => {\n            clearTimeout(timer);\n        }\n        // eslint-disable-next-line\n    }, []);\n\n    // eslint-disable-next-line\n    useEffect(() => {\n        localStorage.setItem('RECORDS', JSON.stringify(records));\n        localStorage.setItem('SHOW_MISTAKES', showMistakes ? \"1\" : \"0\");\n        localStorage.setItem('SECONDS_SPENT', secondsSpent.toString());\n        localStorage.setItem(\"CELLS\", JSON.stringify(cells));\n\n        const dataMusicSoundSaved = JSON.parse(localStorage.getItem('dataMusicSound') as string);\n        if (dataMusicSoundSaved) {\n            setVolume(dataMusicSoundSaved.valueSound / 10);\n        }\n\n        if (!finished && isAllCellsDone(cells)) {\n            onGameFinished();\n        }\n    });\n\n    function range(start: number, end: number): number[] {\n        const result = [];\n        for (let i = start; i <= end; i++) {\n            result.push(i);\n        }\n\n        return result;\n    }\n\n    function isSelectedCell(cellConfig: CellConfigInterface): boolean {\n        return selectedCell !== undefined\n            && selectedCell.row === cellConfig.row\n            && selectedCell.col === cellConfig.col;\n    }\n\n    function startNewGame(): void {\n        const levelApiResponse = getRandomLevel();\n        console.log('Start new game...', levelApiResponse);\n\n        const cellsTemp = new Array<Array<CellConfigInterface>>();\n        let index = 0;\n        for (let row = 0; row <= FIELD_SIZE - 1; row++) {\n            cellsTemp[row] = new Array<CellConfigInterface>();\n            for (let column = 0; column <= FIELD_SIZE - 1; column++) {\n                cellsTemp[row][column] = {\n                    value: parseInt(levelApiResponse.mission[index]) as CellValueType,\n                    solution: parseInt(levelApiResponse.solution[index]) as CellSolutionType,\n                    prefilled: levelApiResponse.mission[index] === levelApiResponse.solution[index],\n                    row: row,\n                    col: column\n                }\n\n                index++;\n            }\n        }\n\n        setCells(cellsTemp);\n    }\n\n    function onKeydown(e: KeyboardEvent): void {\n        console.log('key pressed:', e.key);\n\n        if (!selectedCell) {\n            console.log('No cell selected when key pressed:', e.key);\n            return;\n        }\n\n        switch (e.key) {\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n                changeCurrentCellValue(parseInt(e.key) as CellValueType);\n                break;\n\n            case '0':\n            case 'Backspace':\n                changeCurrentCellValue(0 as CellValueType);\n                break;\n\n            default:\n                //do nothing\n                break;\n        }\n    }\n\n    function changeCurrentCellValue(newValue: CellValueType): void {\n        if (!selectedCell || selectedCell.prefilled) {\n            return;\n        }\n\n        if (finished) {\n            return;\n        }\n\n        if (selectedCell.solution === newValue) {\n            playCorrectSound();\n        } else {\n            playWrongSound();\n        }\n\n        const newCells = JSON.parse(JSON.stringify(cells));\n        newCells[selectedCell.row][selectedCell.col].value = newValue;\n        setCells(newCells);\n    }\n\n    function saveRecord(): void {\n        records.unshift(secondsSpent);\n\n        setRecords(records.slice(0, MAX_COUNT_RECORDS));\n    }\n\n    function isAllCellsDone(cells: Array<Array<CellConfigInterface>>): boolean {\n        if (!cells.length) {\n            return false;\n        }\n\n        for (const row of cells) {\n            for (const cell of row) {\n                if (cell.value !== cell.solution) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function getAndSelectRandomNotSolvedCell(cells: Array<Array<CellConfigInterface>>): CellConfigInterface|null {\n        const notSolvedCells = [];\n\n        for (const row of cells) {\n            for (const cell of row) {\n                if (!cell.prefilled && cell.value !== cell.solution) {\n                    notSolvedCells.push(cell);\n                }\n            }\n        }\n\n        if (!notSolvedCells.length) {\n            return null;\n        }\n\n        const cell = notSolvedCells[Math.floor(Math.random() * notSolvedCells.length)];\n        selectCell(cell);\n\n        return cell;\n    }\n\n    function selectCell(cell: CellConfigInterface): void {\n        playCellSelectedSound();\n        setSelectedCell(cell);\n    }\n\n    function solveExactlyOneCell(cells: Array<Array<CellConfigInterface>>): void {\n        const cell = getAndSelectRandomNotSolvedCell(cells);\n\n        if (!cell) {\n            return;\n        }\n\n        setTimeout(() => {\n            const newCells = JSON.parse(JSON.stringify(cells));\n\n            if (randomIntFromInterval(1, 7) === 7) {\n                const newValue = randomIntFromInterval(1, 9);\n\n                if (newCells[cell.row][cell.col].solution === newValue) {\n                    playCorrectSound();\n                } else {\n                    playWrongSound();\n                }\n                newCells[cell.row][cell.col].value = newValue;\n                setCells(newCells);\n            } else {\n                newCells[cell.row][cell.col].value = cell.solution;\n                setCells(newCells);\n                playCorrectSound();\n            }\n\n        }, SOLVE_AUTOMATICALLY_CELL_MIN_TIMEOUT / randomIntFromInterval(1, 5));\n    }\n\n    function randomIntFromInterval(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    function solveAutomaticallyStepByStep(): void {\n        if (finished) {\n            alert('The game is already solved. Click Start New Game or Restart.');\n            return;\n        }\n\n        setTimeout(() => {\n            const newCells = JSON.parse(JSON.stringify(cellsRef.current));\n\n            solveExactlyOneCell(newCells);\n\n            if (!isAllCellsDone(newCells)) {\n                solveAutomaticallyStepByStep();\n            }\n        }, SOLVE_AUTOMATICALLY_CELL_MIN_TIMEOUT + randomIntFromInterval(100, 700));\n    }\n\n    function onGameFinished(): void {\n        localStorage.removeItem('CELLS');\n        localStorage.removeItem('SECONDS_SPENT');\n        setFinished(true);\n        alert(\"Congrats! Your score is \" + getHumanReadableTimerTime(secondsSpent) + \". You can start new game.\");\n        saveRecord();\n    }\n\n    function handleShowMistakesClick() {\n        setShowMistakes(!showMistakes);\n    }\n\n    function setTimerSecondsSpent(secondsSpent: number) {\n        setSecondsSpent(secondsSpent);\n    }\n\n    function fullScreen(): void {\n        if (!document.fullscreenElement) {\n            document.documentElement.requestFullscreen();\n        } else {\n            document.exitFullscreen();\n        }\n    }\n\n    function restartCells(): void {\n        const newCells = JSON.parse(JSON.stringify(cells));\n\n        for (const row of newCells) {\n            for (const cell of row) {\n                if (!cell.prefilled) {\n                    cell.value = 0;\n                }\n            }\n        }\n\n        setCells(newCells);\n        setTimerSecondsSpent(0);\n    }\n\n    return (\n        <div className=\"sudoku-wrapper\">\n            <div className=\"game-info-wrapper flex-wrapper\">\n                <div className=\"check-mistakes-wrapper\">\n                    <label className=\"check-mistakes\">\n                        <span className=\"label-text\">Show Mistakes</span>\n                        <span className=\"switch\">\n                                    <input type=\"checkbox\"\n                                           checked={showMistakes}\n                                           onChange={handleShowMistakesClick}\n                                    />\n                                </span>\n                    </label>\n                </div>\n                <div className=\"timer-wrapper\">\n                    <Timer secondsSpent={secondsSpent}\n                           setSecondsSpent={setTimerSecondsSpent}\n                           finished={finished}\n                    />\n                </div>\n                <div className=\"full-screen-wrapper\">\n                    <input type=\"button\"\n                           value={document.fullscreenElement ? \"Minimize\" : \"Full Screen\"}\n                           onClick={fullScreen}\n                    />\n                </div>\n            </div>\n            <div className=\"game-flex-wrapper\">\n                <div className=\"game-wrapper\">\n                    <div className=\"game\">\n                        <table className={\"game-table\" + (showMistakes ? \" show-mistakes\" : \"\") + (finished ? \" game-finished\" : \"\")}>\n                            <tbody>\n                            {range(0, FIELD_SIZE - 1).map(rowNumber => {\n                                return (\n                                    <tr className=\"game-row\" key={rowNumber}>\n                                        {range(0, FIELD_SIZE - 1).map(columnNumber => {\n                                            const cellConfig = cells.length ? cells[rowNumber][columnNumber] : null;\n                                            return <GameCell cellConfig={cellConfig}\n                                                             key={rowNumber.toString() + columnNumber.toString()}\n                                                             selected={cellConfig ? isSelectedCell(cellConfig) : false}\n                                                             setSelectedCell={selectCell}\n                                            />\n                                        })}\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <div className=\"game-controls-wrapper\">\n                    <nav>\n                        <NavNewGame restartCells={restartCells} />\n                        <input type=\"button\" value=\"Solve all automatically\" onClick={solveAutomaticallyStepByStep} />\n                        <NavHotkeys/>\n                        <NavRecords records={records}/>\n                    </nav>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Game;","import React from \"react\";\nimport \"./Header.scss\";\n\nfunction Header() {\n   return (\n       <header className=\"site-header\">\n           <div className=\"content-wrapper\">\n               <a href=\"/\" className=\"logo-sudoku\">{' '}</a>\n           </div>\n       </header>\n   )\n}\n\nexport default Header;","export default __webpack_public_path__ + \"static/media/rs_school_js.ad178c0d.svg\";","import React from \"react\";\nimport rsSchoolLogo from \"../../images/rs_school_js.svg\";\nimport \"./Footer.scss\";\n\nfunction Footer() {\n    return (\n        <footer className=\"site-footer\">\n            <div className=\"content-wrapper flex-wrapper\">\n                <div className=\"footer-item\">\n                    <a className=\"rs-logo\" href=\"https://rs.school/js/\">\n                        <img src={rsSchoolLogo} alt=\"RS School\"/>\n                    </a>\n                </div>\n                <div className=\"footer-item\">\n                    <a href=\"https://github.com/bopoda\">Eugene Yurkevich</a>, 2021\n                </div>\n                <div className=\"footer-item\">\n                    {' '}\n                </div>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","export default __webpack_public_path__ + \"static/media/birds.3515c56d.mp3\";","import React from 'react';\nimport musicBirds from '../../sounds/birds.mp3';\nimport soundClick from '../../sounds/click.mp3';\nimport {useState, useEffect} from \"react\";\n\nexport default function SoundsMusic() {\n    const audioMusic = document.getElementById('audio-music');\n    const audioSound = document.getElementById('audio-sound');\n    const [valueMusic, setValueMusic] = useState(0);\n    const [valueSound, setValueSound] = useState(0);\n\n    function handleMusicClick(e) {\n        if (e.target.value === e.target.min) {\n            audioMusic.pause();\n        } else {\n            audioMusic.volume = e.target.value / 10;\n            audioMusic.play();\n        }\n    }\n\n    function handleSoundClick(e) {\n        audioSound.pause();\n        if (e.target.value !== e.target.min) {\n            audioSound.volume = e.target.value / 10;\n            audioSound.play();\n        }\n    }\n\n    useEffect(() => {\n        const valuesToSave = {\n            valueMusic,\n            valueSound,\n        };\n        localStorage.setItem('dataMusicSound', JSON.stringify(valuesToSave));\n    })\n\n    return (\n        <div className=\"sound-control\">\n            <audio volume={valueMusic / 10} loop id=\"audio-music\" src={musicBirds}/>\n            <p className='sound-control__music'>Music<span className=\"sound-control__Off\">{' '}</span></p>\n            <input id=\"range\" min=\"0\" max=\"10\" type=\"range\" value={valueMusic} name=\"range\" step=\"1\"\n                   onClick={handleMusicClick}\n                   onChange={(e) => setValueMusic(e.target.value)}/>\n\n            <audio id=\"audio-sound\" volume={valueSound / 10} src={soundClick}/>\n            <p className='sound-control__sound'>Sound<span className=\"sound-control__Off\">{' '}</span></p>\n            <input id=\"range\" min=\"0\" max=\"10\" type=\"range\"\n                   value={valueSound}\n                   name=\"range\"\n                   step=\"1\"\n                   onClick={handleSoundClick}\n                   onChange={(e) => setValueSound(e.target.value)}/>\n        </div>\n    );\n}\n","import React from 'react';\nimport Game from \"./component/game\";\nimport Header from \"./component/header\";\nimport Footer from \"./component/footer\";\nimport SoundsMusic from \"./component/sound/SoundsMusic\";\n\nfunction App() {\n    return (\n        <>\n            <Header/>\n            <div className=\"content-wrapper site-content-wrapper\" id=\"site-content-wrapper\">\n                <div className=\"site-content\">\n                    <Game/>\n                </div>\n                <aside>\n                    <SoundsMusic/>\n                </aside>\n            </div>\n            <Footer/>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}